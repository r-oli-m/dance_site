{"ast":null,"code":"var _jsxFileName = \"/Users/reva/Desktop/projects/web102/web_final/client/src/components/CommentSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentSection = _ref => {\n  _s();\n\n  let {\n    postId\n  } = _ref;\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    const fetchComments = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('info').select('comments').eq('id', postId).single();\n\n      if (error) {\n        console.error('Error fetching comments:', error.message);\n        return;\n      } // Set comments state to the array of comments for the post\n\n\n      setComments(data.comments || []);\n    };\n\n    fetchComments();\n  }, [postId]);\n\n  const handleSubmit = async event => {\n    event.preventDefault(); // Check if newComment is not empty\n\n    if (newComment.trim() === '') return;\n\n    try {\n      // Update comments array for the post in the info table\n      const {\n        data,\n        error\n      } = await supabase.from('info').update({\n        comments: [...comments, newComment]\n      }).eq('id', postId);\n\n      if (error) {\n        console.error('Error adding comment:', error.message);\n        return;\n      } // Update comments state with the new comment\n\n\n      setComments([...comments, newComment]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: comment\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add a comment...\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n\n_c = CommentSection;\nexport default CommentSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","supabase","CommentSection","postId","comments","setComments","newComment","setNewComment","fetchComments","data","error","from","select","eq","single","console","message","handleSubmit","event","preventDefault","trim","update","map","comment","index","e","target","value"],"sources":["/Users/reva/Desktop/projects/web102/web_final/client/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../client';\n\nconst CommentSection = ({ postId }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      const { data, error } = await supabase\n        .from('info')\n        .select('comments')\n        .eq('id', postId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching comments:', error.message);\n        return;\n      }\n\n      // Set comments state to the array of comments for the post\n      setComments(data.comments || []);\n    };\n\n    fetchComments();\n  }, [postId]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Check if newComment is not empty\n    if (newComment.trim() === '') return;\n\n    try {\n      // Update comments array for the post in the info table\n      const { data, error } = await supabase\n        .from('info')\n        .update({ comments: [...comments, newComment] })\n        .eq('id', postId);\n\n      if (error) {\n        console.error('Error adding comment:', error.message);\n        return;\n      }\n\n      // Update comments state with the new comment\n      setComments([...comments, newComment]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error adding comment:', error.message);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Comments</h2>\n      <ul>\n        {comments.map((comment, index) => (\n          <li key={index}>{comment}</li>\n        ))}\n      </ul>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Add a comment...\"\n          required\n        />\n        <button type=\"submit\">Post Comment</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,WAAzB;;;AAEA,MAAMC,cAAc,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAAEC;EAAF,CAAe;EACrC,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMQ,aAAa,GAAG,YAAY;MAChC,MAAM;QAAEC,IAAF;QAAQC;MAAR,IAAkB,MAAMT,QAAQ,CACnCU,IAD2B,CACtB,MADsB,EAE3BC,MAF2B,CAEpB,UAFoB,EAG3BC,EAH2B,CAGxB,IAHwB,EAGlBV,MAHkB,EAI3BW,MAJ2B,EAA9B;;MAMA,IAAIJ,KAAJ,EAAW;QACTK,OAAO,CAACL,KAAR,CAAc,0BAAd,EAA0CA,KAAK,CAACM,OAAhD;QACA;MACD,CAV+B,CAYhC;;;MACAX,WAAW,CAACI,IAAI,CAACL,QAAL,IAAiB,EAAlB,CAAX;IACD,CAdD;;IAgBAI,aAAa;EACd,CAlBQ,EAkBN,CAACL,MAAD,CAlBM,CAAT;;EAoBA,MAAMc,YAAY,GAAG,MAAOC,KAAP,IAAiB;IACpCA,KAAK,CAACC,cAAN,GADoC,CAEpC;;IACA,IAAIb,UAAU,CAACc,IAAX,OAAsB,EAA1B,EAA8B;;IAE9B,IAAI;MACF;MACA,MAAM;QAAEX,IAAF;QAAQC;MAAR,IAAkB,MAAMT,QAAQ,CACnCU,IAD2B,CACtB,MADsB,EAE3BU,MAF2B,CAEpB;QAAEjB,QAAQ,EAAE,CAAC,GAAGA,QAAJ,EAAcE,UAAd;MAAZ,CAFoB,EAG3BO,EAH2B,CAGxB,IAHwB,EAGlBV,MAHkB,CAA9B;;MAKA,IAAIO,KAAJ,EAAW;QACTK,OAAO,CAACL,KAAR,CAAc,uBAAd,EAAuCA,KAAK,CAACM,OAA7C;QACA;MACD,CAVC,CAYF;;;MACAX,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcE,UAAd,CAAD,CAAX;MACAC,aAAa,CAAC,EAAD,CAAb;IACD,CAfD,CAeE,OAAOG,KAAP,EAAc;MACdK,OAAO,CAACL,KAAR,CAAc,uBAAd,EAAuCA,KAAK,CAACM,OAA7C;IACD;EACF,CAvBD;;EAyBA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UACGZ,QAAQ,CAACkB,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,kBACZ;QAAA,UAAiBD;MAAjB,GAASC,KAAT;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAFF,eAOE;MAAM,QAAQ,EAAEP,YAAhB;MAAA,wBACE;QACE,KAAK,EAAEX,UADT;QAEE,QAAQ,EAAGmB,CAAD,IAAOlB,aAAa,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAFhC;QAGE,WAAW,EAAC,kBAHd;QAIE,QAAQ;MAJV;QAAA;QAAA;QAAA;MAAA,QADF,eAOE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CApED;;GAAMzB,c;;KAAAA,c;AAsEN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}